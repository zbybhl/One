package com.zhixing.staffid.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhixing.staffid.entity.Content;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTENT".
*/
public class ContentDao extends AbstractDao<Content, Long> {

    public static final String TABLENAME = "CONTENT";

    /**
     * Properties of entity Content.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Item_id = new Property(1, String.class, "item_id", false, "ITEM_ID");
        public final static Property Category = new Property(2, Integer.class, "category", false, "CATEGORY");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Img_url = new Property(4, String.class, "img_url", false, "IMG_URL");
        public final static Property Pic_info = new Property(5, String.class, "pic_info", false, "PIC_INFO");
        public final static Property Words_info = new Property(6, String.class, "words_info", false, "WORDS_INFO");
        public final static Property Subtitle = new Property(7, String.class, "subtitle", false, "SUBTITLE");
        public final static Property Post_date = new Property(8, java.util.Date.class, "post_date", false, "POST_DATE");
    }


    public ContentDao(DaoConfig config) {
        super(config);
    }
    
    public ContentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ITEM_ID\" TEXT NOT NULL ," + // 1: item_id
                "\"CATEGORY\" INTEGER," + // 2: category
                "\"TITLE\" TEXT," + // 3: title
                "\"IMG_URL\" TEXT," + // 4: img_url
                "\"PIC_INFO\" TEXT," + // 5: pic_info
                "\"WORDS_INFO\" TEXT," + // 6: words_info
                "\"SUBTITLE\" TEXT," + // 7: subtitle
                "\"POST_DATE\" INTEGER);"); // 8: post_date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Content entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getItem_id());
 
        Integer category = entity.getCategory();
        if (category != null) {
            stmt.bindLong(3, category);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String img_url = entity.getImg_url();
        if (img_url != null) {
            stmt.bindString(5, img_url);
        }
 
        String pic_info = entity.getPic_info();
        if (pic_info != null) {
            stmt.bindString(6, pic_info);
        }
 
        String words_info = entity.getWords_info();
        if (words_info != null) {
            stmt.bindString(7, words_info);
        }
 
        String subtitle = entity.getSubtitle();
        if (subtitle != null) {
            stmt.bindString(8, subtitle);
        }
 
        java.util.Date post_date = entity.getPost_date();
        if (post_date != null) {
            stmt.bindLong(9, post_date.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Content entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getItem_id());
 
        Integer category = entity.getCategory();
        if (category != null) {
            stmt.bindLong(3, category);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String img_url = entity.getImg_url();
        if (img_url != null) {
            stmt.bindString(5, img_url);
        }
 
        String pic_info = entity.getPic_info();
        if (pic_info != null) {
            stmt.bindString(6, pic_info);
        }
 
        String words_info = entity.getWords_info();
        if (words_info != null) {
            stmt.bindString(7, words_info);
        }
 
        String subtitle = entity.getSubtitle();
        if (subtitle != null) {
            stmt.bindString(8, subtitle);
        }
 
        java.util.Date post_date = entity.getPost_date();
        if (post_date != null) {
            stmt.bindLong(9, post_date.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Content readEntity(Cursor cursor, int offset) {
        Content entity = new Content( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // item_id
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // category
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // img_url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pic_info
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // words_info
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // subtitle
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)) // post_date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Content entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItem_id(cursor.getString(offset + 1));
        entity.setCategory(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImg_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPic_info(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWords_info(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSubtitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPost_date(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Content entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Content entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Content entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
